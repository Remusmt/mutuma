/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateColumnArgs } from "./CreateColumnArgs";
import { UpdateColumnArgs } from "./UpdateColumnArgs";
import { DeleteColumnArgs } from "./DeleteColumnArgs";
import { ColumnCountArgs } from "./ColumnCountArgs";
import { ColumnFindManyArgs } from "./ColumnFindManyArgs";
import { ColumnFindUniqueArgs } from "./ColumnFindUniqueArgs";
import { Column } from "./Column";
import { Model } from "../../model/base/Model";
import { ColumnService } from "../column.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Column)
export class ColumnResolverBase {
  constructor(
    protected readonly service: ColumnService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Column",
    action: "read",
    possession: "any",
  })
  async _columnsMeta(
    @graphql.Args() args: ColumnCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Column])
  @nestAccessControl.UseRoles({
    resource: "Column",
    action: "read",
    possession: "any",
  })
  async columns(@graphql.Args() args: ColumnFindManyArgs): Promise<Column[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Column, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Column",
    action: "read",
    possession: "own",
  })
  async column(
    @graphql.Args() args: ColumnFindUniqueArgs
  ): Promise<Column | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Column)
  @nestAccessControl.UseRoles({
    resource: "Column",
    action: "create",
    possession: "any",
  })
  async createColumn(@graphql.Args() args: CreateColumnArgs): Promise<Column> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        model: args.data.model
          ? {
              connect: args.data.model,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Column)
  @nestAccessControl.UseRoles({
    resource: "Column",
    action: "update",
    possession: "any",
  })
  async updateColumn(
    @graphql.Args() args: UpdateColumnArgs
  ): Promise<Column | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          model: args.data.model
            ? {
                connect: args.data.model,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Column)
  @nestAccessControl.UseRoles({
    resource: "Column",
    action: "delete",
    possession: "any",
  })
  async deleteColumn(
    @graphql.Args() args: DeleteColumnArgs
  ): Promise<Column | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Model, {
    nullable: true,
    name: "model",
  })
  @nestAccessControl.UseRoles({
    resource: "Model",
    action: "read",
    possession: "any",
  })
  async resolveFieldModel(
    @graphql.Parent() parent: Column
  ): Promise<Model | null> {
    const result = await this.service.getModel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
